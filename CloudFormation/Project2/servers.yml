Description: >
    Adrian Pe√±a / Udacity
    Deploy and application from S3 files in Apache web server

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

Resources:

    #Iam roles
    UdacityS3ReadOnlyEC2: 
        Type: "AWS::IAM::Role"
        Properties: 
            AssumeRolePolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                -   Effect: "Allow"
                    Principal: 
                        Service: 
                        -   "ec2.amazonaws.com"
                    Action: 
                    -   "sts:AssumeRole"
            Path: "/"
    
    UdacityS3ReadOnlyEC2Policies: 
        Type: "AWS::IAM::Policy"
        Properties: 
            PolicyName: "UdacityS3ReadOnlyEC2"
            PolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                -   Effect: "Allow"
                    Action: 
                    -   's3:GetObject*'
                    Resource: "*"
            Roles: 
            -   Ref: "UdacityS3ReadOnlyEC2"

    ProfileWithRolesForOurApp:
        Type: AWS::IAM::InstanceProfile
        Properties: 
            Roles:
            -   Ref: UdacityS3ReadOnlyEC2

    LBSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            GroupDescription: Allow http to our load balancer
            VpcId:
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
            -   IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
            -   IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0
    
    WebServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties: 
            GroupDescription: Allow http for out hosts and SSH from local only
            VpcId:
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"
            SecurityGroupIngress:
            -   IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0
            -   IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
            -   IpProtocol: tcp
                FromPort: 0
                ToPort: 65535
                CidrIp: 0.0.0.0/0

    WebAppLauchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    sudo apt-get update -y
                    sudo apt-get install unzip awscli -y
                    sudo apt-get install apache2 -y
                    sudo systemctl start apache2.service
                    cd /var/www/html
                    sudo aws s3 cp s3://udacity-demo-1/udacity.zip .
                    sudo unzip -o udacity.zip
            ImageId: ami-06d51e91cea0dac8d # Ubuntu 18.04 LTS
            SecurityGroups:
            -   Ref: WebServerSecGroup
            InstanceType: t3.small # 
            BlockDeviceMappings:
            -   DeviceName: "/dev/sda1" 
                Ebs:
                    VolumeSize: '10' # 10
            IamInstanceProfile: 
                Ref: "ProfileWithRolesForOurApp"

    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties: 
            VPCZoneIdentifier:
            -   Fn::ImportValue:
                    !Sub "${EnvironmentName}-PRIV-NETS" # Change to PUB-NETS to degub purposes (values: PUB-NETS, PRIV-NETS)
            LaunchConfigurationName:
                Ref: WebAppLauchConfig
            MinSize: '1' # 1
            MaxSize: '4' # 4
            TargetGroupARNs:
            -   Ref: WebAppTargetGroup
    
    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties: 
            Subnets: 
            -   Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
            -   Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
            SecurityGroups: 
            -   Ref: LBSecGroup

    Listener:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            DefaultActions:
            -   Type: forward
                TargetGroupArn:
                    Ref: WebAppTargetGroup
            LoadBalancerArn: 
                Ref: WebAppLB
            Port: '80'
            Protocol: "HTTP"

    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties: 
            Actions: 
            -   Type: forward
                TargetGroupArn: !Ref 'WebAppTargetGroup'
            Conditions: 
            -   Field: path-pattern
                Values: [/]
            ListenerArn: !Ref 'Listener'
            Priority: 1

    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties: 
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 8
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId: 
                Fn::ImportValue:
                    Fn::Sub: "${EnvironmentName}-VPCID"
Outputs:

    WebAppLBDns:
        Description: 'A reference to the created Load balancer'
        Value: !Join [ "", [ "http://", !GetAtt WebAppLB.DNSName ]] 
        Export:
            Name: !Sub ${EnvironmentName}-WEBAPPLB